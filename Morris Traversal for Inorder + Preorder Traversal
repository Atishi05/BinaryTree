
package com.company;
import java.util.*;
public class Main {
    static Scanner sc = null;
    public static void main(String[] args) {
        sc = new Scanner(System.in);
        Node root = createTree();
        System.out.println("Morris Inorder"+ inorderMorris(root));
        System.out.println("Morris Preorder"+ preorderMorris(root));
    }
    public static Node createTree(){
        Node root = null;
        System.out.println("Enter data");
        int data = sc.nextInt();
        if(data == -1)  return null;
        root = new Node(data);
        System.out.println("Enter data for Left:"+ data);
        root.left = createTree();
        System.out.println("Enter data for Right:"+ data);
        root.right = createTree();
        return root;
    }
public static List<Integer> inorderMorris(Node root){
        List<Integer> ans = new ArrayList<>();
        Node curr = root;
        while(curr != null){
            if(curr.left == null){
                ans.add(curr.data);
                curr = curr.right;
            }
            else {
                Node prev = curr.left;
                while (prev.right != null && prev.right != curr){
                    prev = prev.right;
                }
                if(prev.right == null){
                    prev.right = curr;
                    curr = curr.left;
                }
                else {
                    prev.right = null;
                    ans.add(curr.data);
                    curr = curr.right;
                }
            }
        }
        return ans;
    }
    public static List<Integer> preorderMorris(Node root){
        List<Integer> ans = new ArrayList<>();
        Node curr = root;
        while(curr != null){
            if(curr.left == null){
                ans.add(curr.data);
                curr = curr.right;
            }
            else {
                Node prev = curr.left;
                while (prev.right != null && prev.right != curr){
                    prev = prev.right;
                }
                if(prev.right == null){
                    prev.right = curr;
                    ans.add(curr.data);
                    curr = curr.left;
                }
                else {
                    prev.right = null;
                    curr = curr.right;
                }
            }
        }
        return ans;
    }
}
 class Node{
    Node right, left;
    int data;
    public Node(int data){
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

OUTPUT-->

Enter data
1
Enter data for Left:1
Enter data
2
Enter data for Left:2
Enter data
4
Enter data for Left:4
Enter data
-1
Enter data for Right:4
Enter data
-1
Enter data for Right:2
Enter data
5
Enter data for Left:5
Enter data
-1
Enter data for Right:5
Enter data
6
Enter data for Left:6
Enter data
-1
Enter data for Right:6
Enter data
-1
Enter data for Right:1
Enter data
3
Enter data for Left:3
Enter data
-1
Enter data for Right:3
Enter data
-1
Morris Inorder[4, 2, 5, 6, 1, 3]
Morris Preorder[1, 2, 4, 5, 6, 3]

Process finished with exit code 0
