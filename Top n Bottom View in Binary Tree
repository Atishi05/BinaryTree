import java.util.*;
import java.util.List;
class Pair{
    Node node;
    int hd;

    Pair(int hd,Node node){
        this.hd = hd;
        this.node = node;
    }
}
public class Main {
    static Scanner sc = null;
    public static void main(String[] args) {
        sc = new Scanner(System.in);
        Node root = createTree();
        System.out.println("Top View: "+ topView(root));
        System.out.println("Bottom View: "+ bottomView(root));
    }
public static Node createTree(){
        Node root = null;
        System.out.println("Enter data");
        int data = sc.nextInt();
        if(data == -1)  return null;
        root = new Node(data);
        System.out.println("Enter data for Left:"+ data);
        root.left = createTree();
        System.out.println("Enter data for Right:"+ data);
        root.right = createTree();
        return root;
    }
    /*public  static int height(Node root){
        if(root == null) return 0;
        else
            return (1 + Math.max(height(root.left),height(root.right)));
    }
    public static int size(Node root){
        if(root == null) return 0;
        else
            return size(root.left) + size(root.right) + 1;
    }
    public static int maximum(Node root){
        if(root == null) return Integer.MIN_VALUE;
        else
            return (Math.max(root.data, Math.max(maximum(root.left),maximum(root.right))));

    }

    public static void levelOrderTrav(Node root){
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        q.add(null);
        while(!q.isEmpty()){
            Node curr = q.poll();
            if(curr == null){
                if(q.isEmpty()) return;
                q.add(null);
                System.out.println();
                continue;
            }
            System.out.print(curr.data+" ");
            if(curr.left != null)  q.add(curr.left);
            if(curr.right != null)  q.add(curr.right);
        }
    }
    */
    public static List<Integer> topView(Node root){
        List<Integer> ans = new ArrayList<>();
        Map<Integer,Integer> mp = new TreeMap<>();
        Queue<Pair> q = new LinkedList<>();

        q.add(new Pair(0,root));
        while (! q.isEmpty()){
            Pair curr = q.poll();
            if (!mp.containsKey(curr.hd)){
                mp.put(curr.hd,curr.node.data);
            }
            if(curr.node.left != null){
                q.add(new Pair(curr.hd-1,curr.node.left));
            }
            if(curr.node.right != null){
                q.add(new Pair(curr.hd+1,curr.node.right));
            }
        }
        for(Map.Entry<Integer,Integer> it: mp.entrySet()){
            ans.add(it.getValue());
        }
        return ans;
    }
    public static List<Integer> bottomView(Node root){
        List<Integer> ans = new ArrayList<>();
        Map<Integer,Integer> mp = new TreeMap<>();
        Queue<Pair> q = new LinkedList<>();

        q.add(new Pair(0,root));
        while (! q.isEmpty()){
            Pair curr = q.poll();
            mp.put(curr.hd,curr.node.data);
            if(curr.node.left != null){
                q.add(new Pair(curr.hd-1,curr.node.left));
            }
            if(curr.node.right != null){
                q.add(new Pair(curr.hd+1,curr.node.right));
            }
        }
        for(Map.Entry<Integer,Integer> it: mp.entrySet()){
            ans.add(it.getValue());
        }
        return ans;
    }
}

OUTPUT-->

Enter data
10
Enter data for Left:10
Enter data
20
Enter data for Left:20
Enter data
40
Enter data for Left:40
Enter data
-1
Enter data for Right:40
Enter data
-1
Enter data for Right:20
Enter data
60
Enter data for Left:60
Enter data
-1
Enter data for Right:60
Enter data
-1
Enter data for Right:10
Enter data
30
Enter data for Left:30
Enter data
-1
Enter data for Right:30
Enter data
-1
Top View: [40, 20, 10, 30]
Bottom View: [40, 20, 60, 30]

Process finished with exit code 0
